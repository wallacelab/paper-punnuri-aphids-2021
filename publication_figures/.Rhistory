pheno_name_key=c("Flowering Time" = "FLoweringtime",
"Greenhouse Damage" = "GHD",
"Plant Height (log)" = "Log_2019.2020_PH",
"D1 Aphid Count (log)" = "Log_D1_2019.2020AC",
"D1 Aphid Damage (log)" = "Log_D1_2019.2020",
"D2 Aphid Count (log)" = "Log_D2_2019.2020AC",
"D2 Aphid Damage (log)" = "Log_D2_2019.2020",
"NDRE" = "NDREAug25",
"NDVI" = "NDVIAug25",
"SAVI" = "SAVI_Aug25",
"NDRE (flowering covariate)" = "NDREAug25.with_flowering",
"NDVI (flowering covariate)" = "NDVIAug25.with_flowering",
"SAVI (flowering covariate)" = "SAVI_Aug25.with_flowering")
# Helper function to make plots for each phenotype
get_plots = function(traits){
file.info = pheno_name_key[traits]
glm_files = paste("Results_GLM/glm_results.",file.info,".csv.gz", sep='')
farm_files = paste("Results_FarmCPU/1e_",file.info,".p05.rmip05.csv", sep='')
# Make plots
myplots=list()
for(i in 1:length(traits)){
myplots[[i]] = plot_manhattan(traits[i], glm_files[i], farm_files[i], args)
}
# Arrange into grid
chrom_label=text_grob("Chromosome", size = 12, face = "bold")
left_label =text_grob(expression(bold(paste("-", log[10], " p-value (GLM)"))), size = 12, rot=90)
right_label =text_grob("RMIP (FarmCPU)", size = 12, face='bold', rot=-90)
legend=rasterGrob(readPNG(legend.file))
grid.arrange(arrangeGrob(grobs=myplots, ncol=1), legend,
nrow=2, heights=c(10,1), bottom=chrom_label, left=left_label, right=right_label)
}
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Drones
png("Figure - Drone Manhattan plots (no covariates).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE", "NDVI", "SAVI"))
dev.off()
png("Figure - Drone Manhattan plots (flowering covariate).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE (flowering covariate)", "NDVI (flowering covariate)", "SAVI (flowering covariate)"))
dev.off()
# Flowering + Height
png("Figure - Flowering and Height Manhattan plots.png", width=out.width, height=4, units="in", res=out.dpi)
get_plots(c("Flowering Time", "Plant Height (log)"))
dev.off()
# TODO: Get legend on there somehow
?sec_axis
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Load helper functions
source('0_MakeManhattanPlot.r')
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Drones
png("Figure - Drone Manhattan plots (no covariates).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE", "NDVI", "SAVI"))
dev.off()
png("Figure - Drone Manhattan plots (flowering covariate).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE (flowering covariate)", "NDVI (flowering covariate)", "SAVI (flowering covariate)"))
dev.off()
# Flowering + Height
png("Figure - Flowering and Height Manhattan plots.png", width=out.width, height=4, units="in", res=out.dpi)
get_plots(c("Flowering Time", "Plant Height (log)"))
dev.off()
#! /usr/bin/Rscript
library(gridExtra)
library(ggpubr)
library(grid)
library(png)
options(stringsAsFactors=F)
setwd('~/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
# Arguments to pass along (easier to keep in a list like this)
args=list()
args$rmip_cutoff=0.05
args$perm_cutoff=0.01
args$winsize=5e6
args$step=5e5
args$offsets="sorghum_offsets.csv"
args$debug=FALSE  # Set to true to speed plotting during debugging of changes
# Output figure size (in inches)
out.width=8
out.dpi=600
legend.file="wallace-legend.png"
# Load helper functions
source('0_MakeManhattanPlot.r')
offsets = load_offsets(args$offsets)
# Phenotypes
pheno_name_key=c("Flowering Time" = "FLoweringtime",
"Greenhouse Damage" = "GHD",
"Plant Height (log)" = "Log_2019.2020_PH",
"D1 Aphid Count (log)" = "Log_D1_2019.2020AC",
"D1 Aphid Damage (log)" = "Log_D1_2019.2020",
"D2 Aphid Count (log)" = "Log_D2_2019.2020AC",
"D2 Aphid Damage (log)" = "Log_D2_2019.2020",
"NDRE" = "NDREAug25",
"NDVI" = "NDVIAug25",
"SAVI" = "SAVI_Aug25",
"NDRE (flowering covariate)" = "NDREAug25.with_flowering",
"NDVI (flowering covariate)" = "NDVIAug25.with_flowering",
"SAVI (flowering covariate)" = "SAVI_Aug25.with_flowering")
# Helper function to make plots for each phenotype
get_plots = function(traits){
file.info = pheno_name_key[traits]
glm_files = paste("Results_GLM/glm_results.",file.info,".csv.gz", sep='')
farm_files = paste("Results_FarmCPU/1e_",file.info,".p05.rmip05.csv", sep='')
# Make plots
myplots=list()
for(i in 1:length(traits)){
myplots[[i]] = plot_manhattan(traits[i], glm_files[i], farm_files[i], args)
}
# Arrange into grid
chrom_label=text_grob("Chromosome", size = 12, face = "bold")
left_label =text_grob(expression(bold(paste("-", log[10], " p-value (GLM)"))), size = 12, rot=90)
right_label =text_grob("RMIP (FarmCPU)", size = 12, face='bold', rot=-90)
legend=rasterGrob(readPNG(legend.file))
grid.arrange(arrangeGrob(grobs=myplots, ncol=1), legend,
nrow=2, heights=c(10,1), bottom=chrom_label, left=left_label, right=right_label)
}
# Aphid damage
png("Figure - Aphid Damage Manhattan plots.png", width=out.width, height=8, units="in", res=out.dpi)
get_plots(c("D1 Aphid Count (log)", "D1 Aphid Damage (log)", "D2 Aphid Damage (log)","Greenhouse Damage"))
dev.off()
# Drones
png("Figure - Drone Manhattan plots (no covariates).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE", "NDVI", "SAVI"))
dev.off()
png("Figure - Drone Manhattan plots (flowering covariate).png", width=out.width, height=5.5, units="in", res=out.dpi)
get_plots(c("NDRE (flowering covariate)", "NDVI (flowering covariate)", "SAVI (flowering covariate)"))
dev.off()
# Flowering + Height
png("Figure - Flowering and Height Manhattan plots.png", width=out.width, height=4, units="in", res=out.dpi)
get_plots(c("Flowering Time", "Plant Height (log)"))
dev.off()
# Phenotypes
pheno_name_key=c("FLoweringtime" = "Flowering Time",
"GHD" = "Greenhouse Damage",
"Log_2019.2020_PH" = "Plant Height (log)",
"Log_D1_2019.2020AC" = "D1 Aphid Count (log)",
"Log_D1_2019.2020" = "D1 Aphid Damage (log)",
"Log_D2_2019.2020AC" = "D2 Aphid Count (log)",
"Log_D2_2019.2020" = "D2 Aphid Damage (log)",
"NDREAug25" = "NDRE",
"NDVIAug25" = "NDVI",
"SAVI_Aug25" = "SAVI",
"NDREAug25.with_flowering" = "NDRE (flowering covariate)",
"NDVIAug25.with_flowering" = "NDVI (flowering covariate)",
"SAVI_Aug25.with_flowering") = "SAVI (flowering covariate)")
# Phenotypes
pheno_name_key=c("FLoweringtime" = "Flowering Time",
"GHD" = "Greenhouse Damage",
"Log_2019.2020_PH" = "Plant Height (log)",
"Log_D1_2019.2020AC" = "D1 Aphid Count (log)",
"Log_D1_2019.2020" = "D1 Aphid Damage (log)",
"Log_D2_2019.2020AC" = "D2 Aphid Count (log)",
"Log_D2_2019.2020" = "D2 Aphid Damage (log)",
"NDREAug25" = "NDRE",
"NDVIAug25" = "NDVI",
"SAVI_Aug25" = "SAVI",
"NDREAug25.with_flowering" = "NDRE (flowering covariate)",
"NDVIAug25.with_flowering" = "NDVI (flowering covariate)",
"SAVI_Aug25.with_flowering" = "SAVI (flowering covariate)")
# Helper function to make plots for each phenotype
glm_files =  list.files(pattern="Results_GLM/glm_results")
farm_files = list.files(pattern="Results_FarmCPU/1e_")
glm_files
farm_files
?list.files
# Helper function to make plots for each phenotype
glm_files =  list.files(pattern="Results_GLM/glm_results", recursive=T)
# Helper function to make plots for each phenotype
glm_files =  list.files(path = "Results_GLM", pattern="glm_results")
glm_files
farm_files = list.files(path = "Results_FarmCPU, pattern="1e_")
farm_files = list.files(path = "Results_FarmCPU", pattern="1e_")
farm_files
# Reformat into a nice table with actual trait name
glm.traits = sub(glm, patterm="glm_results.(.+).csv.gz", repl="\\1")
# Reformat into a nice table with actual trait name
glm.traits = sub(glm, pattern="glm_results.(.+).csv.gz", repl="\\1")
# Reformat into a nice table with actual trait name
glm.traits = sub(glm_files, pattern="glm_results.(.+).csv.gz", repl="\\1")
glm.traits
farm.traits= sub(farm_files, pattern="1e_(.+).p.+.rmip.+.csv", repl="\\1")
ffarm.traits
farm.traits
identical(glm.traits, farm.traits)
pheno_name_key
# Reformat into a nice table with actual trait name
names(glm_files) = sub(glm_files, pattern="glm_results.(.+).csv.gz", repl="\\1")
names(farm_files)= sub(farm_files, pattern="1e_(.+).p.+.rmip.+.csv", repl="\\1")
glm_files
#                  "Log_D1_2019.2020AC" = "D1 Aphid Count (log)",
#                  "Log_D1_2019.2020" = "D1 Aphid Damage (log)",
#                  "Log_D2_2019.2020AC" = "D2 Aphid Count (log)",
#                  "Log_D2_2019.2020" = "D2 Aphid Damage (log)",
#                  "NDREAug25" = "NDRE",
#                  "NDVIAug25" = "NDVI",
#                  "SAVI_Aug25" = "SAVI",
#                  "NDREAug25.with_flowering" = "NDRE (flowering covariate)",
#                  "NDVIAug25.with_flowering" = "NDVI (flowering covariate)",
#                  "SAVI_Aug25.with_flowering" = "SAVI (flowering covariate)")
pheno_name_key=c("Flowering Time" = "FLoweringtime",
"Greenhouse Damage" = "GHD",
"Plant Height (log)" = "Log_2019.2020_PH",
"D1 Aphid Count (log)" = "Log_D1_2019.2020AC",
"D1 Aphid Damage (log)" = "Log_D1_2019.2020",
"D2 Aphid Count (log)" = "Log_D2_2019.2020AC",
"D2 Aphid Damage (log)" = "Log_D2_2019.2020",
"NDRE" = "NDREAug25",
"NDVI" = "NDVIAug25",
"SAVI" = "SAVI_Aug25",
"NDRE (flowering covariate)" = "NDREAug25.with_flowering",
"NDVI (flowering covariate)" = "NDVIAug25.with_flowering",
"SAVI (flowering covariate)" = "SAVI_Aug25.with_flowering")
# Helper function to make plots for each phenotype
glm_files =  list.files(path = "Results_GLM", pattern="glm_results")
farm_files = list.files(path = "Results_FarmCPU", pattern="1e_")
# Reformat into a nice table with actual trait name
names(glm_files) = sub(glm_files, pattern="glm_results.(.+).csv.gz", repl="\\1")
names(farm_files)= sub(farm_files, pattern="1e_(.+).p.+.rmip.+.csv", repl="\\1")
infiles = data.frame(row.names = names(pheno_name_key),
glm = glm_files[pheno_name_key],
farm = farm_files[pheno_name_key])
infiles
options(stringsAsFactors=F)
# Arguments
setwd('/home/jgwall/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
args$farmcpu = list.files(path = "Results_FarmCPU", pattern="1e_")
args$glm =  list.files(path = "Results_GLM", pattern="glm_results")
args$rmip_cutoff = 0.05
args$perm_cutoff = 0.05
args$outprefix = "Table - Combined hits"
farm_trait_pattern=".+1e_(.+)\\.p..\\.rmip.+.csv" # File pattern for extracting FarmCPU trait name
# Load GLM results
cat("Loading GLM results from", length(args$glm), "input files\n")
glm = lapply(args$glm, function(infile){
mydata = read.csv(infile)
mydata$Trait = sub(mydata$Trait, pattern="&", repl=".", fixed=T)
return(mydata[,c("Trait", "Marker", "Chr", "Pos", "p", "perm_p")])
})
glm = do.call(rbind, glm)
options(stringsAsFactors=F)
# Arguments
setwd('/home/jgwall/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
args=list()
args$farmcpu = list.files(path = "Results_FarmCPU", pattern="1e_")
args$glm =  list.files(path = "Results_GLM", pattern="glm_results")
args$rmip_cutoff = 0.05
args$perm_cutoff = 0.05
args$outprefix = "Table - Combined hits"
farm_trait_pattern=".+1e_(.+)\\.p..\\.rmip.+.csv" # File pattern for extracting FarmCPU trait name
# Load GLM results
cat("Loading GLM results from", length(args$glm), "input files\n")
glm = lapply(args$glm, function(infile){
mydata = read.csv(infile)
mydata$Trait = sub(mydata$Trait, pattern="&", repl=".", fixed=T)
return(mydata[,c("Trait", "Marker", "Chr", "Pos", "p", "perm_p")])
})
glm = do.call(rbind, glm)
args$glm
args$farmcpu = list.files(path = "Results_FarmCPU", pattern="1e_", full.names=TRUE)
args$farmcpu
# Arguments
setwd('/home/jgwall/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
args=list()
args$farmcpu = list.files(path = "Results_FarmCPU", pattern="1e_", full.names=TRUE)
args$glm =  list.files(path = "Results_GLM", pattern="glm_results", full.names=TRUE)
args$rmip_cutoff = 0.05
args$perm_cutoff = 0.05
args$outprefix = "Table - Combined hits"
farm_trait_pattern=".+1e_(.+)\\.p..\\.rmip.+.csv" # File pattern for extracting FarmCPU trait name
# Load GLM results
cat("Loading GLM results from", length(args$glm), "input files\n")
glm = lapply(args$glm, function(infile){
mydata = read.csv(infile)
mydata$Trait = sub(mydata$Trait, pattern="&", repl=".", fixed=T)
return(mydata[,c("Trait", "Marker", "Chr", "Pos", "p", "perm_p")])
})
glm = do.call(rbind, glm)
# Load FarmCPU results
cat("Loading FarmCPU results from", length(args$farmcpu), "input files\n")
farm = lapply(args$farmcpu, function(infile){
mydata = read.csv(infile)
# Get trait
trait=sub(infile, pattern=farm_trait_pattern, repl="\\1")
mydata$Trait=trait
# Rename columns
names(mydata)[names(mydata)=="chr"] = "Chr"
names(mydata)[names(mydata)=="pos"] = "Pos"
names(mydata)[names(mydata)=="snp"] = "Marker"
# Return data
return(mydata)
})
farm = do.call(rbind, farm)
# Subset to high-quality ones
glm.hits = subset(glm, glm$perm_p <= args$perm_cutoff)
farm.hits = subset(farm, farm$rmip >= args$rmip_cutoff)
# Get unique trait-SNP combinations
combined = rbind(glm.hits[,c("Trait", "Marker", "Chr", "Pos")],
farm.hits[,c("Trait", "Marker", "Chr", "Pos")])
combined = unique(combined)
combined = combined[order(combined$Trait, combined$Chr, combined$Pos),]
# Add in GLM p-values
sitekey = paste(combined$Trait, combined$Chr, combined$Pos, combined$Marker)
glmkey = paste(glm$Trait, glm$Chr, glm$Pos, glm$Marker)
glm.match = match(sitekey, glmkey)
combined$glm_p = glm[glm.match, "p"]
combined$glm_perm_p = glm[glm.match, "perm_p"]
# Add RMIP values
farmkey = paste(farm$Trait, farm$Chr, farm$Pos, farm$Marker)
farm.match = match(sitekey, farmkey)
combined$farm_RMIP = farm[farm.match, "rmip"]
# Write out full set
write.csv(combined, file=paste(args$outprefix, ".full.csv", sep=""), row.names=F)
# Write out only unique positions
spots = split(combined, paste(combined$Marker, combined$Chr, combined$Pos))
spots = lapply(spots, function(s){
data.frame(Marker=unique(s$Marker), Chr=unique(s$Chr), Pos=unique(s$Pos), Traits=paste(s$Trait, collapse=";"))
})
spots=do.call(rbind, spots)
spots = spots[order(spots$Chr, spots$Pos),]
write.csv(spots, file=paste(args$outprefix, ".unique_locations.csv", sep=""), row.names=F)
head(combined)
head(pheno_name)
head(pheno_name_key)
# Phenotypes (connecting file names to more human-readable names)
pheno_name_key=c("Flowering Time" = "FLoweringtime",
"Greenhouse Damage" = "GHD",
"Plant Height (log)" = "Log_2019.2020_PH",
"D1 Aphid Count (log)" = "Log_D1_2019.2020AC",
"D1 Aphid Damage (log)" = "Log_D1_2019.2020",
"D2 Aphid Count (log)" = "Log_D2_2019.2020AC",
"D2 Aphid Damage (log)" = "Log_D2_2019.2020",
"NDRE" = "NDREAug25",
"NDVI" = "NDVIAug25",
"SAVI" = "SAVI_Aug25",
"NDRE (flowering covariate)" = "NDREAug25.with_flowering",
"NDVI (flowering covariate)" = "NDVIAug25.with_flowering",
"SAVI (flowering covariate)" = "SAVI_Aug25.with_flowering")
head(pheno_name_key)
setNames(names(pheno_name_key), pheno_name_key)
# Correct phenotype names
pheno_name_key.inverse = setNames(names(pheno_name_key), pheno_name_key) # Flip which is name and which is value
combined$Trait = pheno_name_key[combined$Trait]
head(combined)
# Get unique trait-SNP combinations
combined = rbind(glm.hits[,c("Trait", "Marker", "Chr", "Pos")],
farm.hits[,c("Trait", "Marker", "Chr", "Pos")])
combined = unique(combined)
combined = combined[order(combined$Trait, combined$Chr, combined$Pos),]
# Add in GLM p-values
sitekey = paste(combined$Trait, combined$Chr, combined$Pos, combined$Marker)
glmkey = paste(glm$Trait, glm$Chr, glm$Pos, glm$Marker)
glm.match = match(sitekey, glmkey)
combined$glm_p = glm[glm.match, "p"]
combined$glm_perm_p = glm[glm.match, "perm_p"]
# Add RMIP values
farmkey = paste(farm$Trait, farm$Chr, farm$Pos, farm$Marker)
farm.match = match(sitekey, farmkey)
combined$farm_RMIP = farm[farm.match, "rmip"]
# Correct phenotype names
pheno_name_key.inverse = setNames(names(pheno_name_key), pheno_name_key) # Flip which is name and which is value
combined$Trait = pheno_name_key.inverse[combined$Trait]
head(combined)
tail(combined)
#! /usr/bin/Rscript
options(stringsAsFactors=F)
# Arguments
setwd('/home/jgwall/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
args=list()
args$farmcpu = list.files(path = "Results_FarmCPU", pattern="1e_", full.names=TRUE)
args$glm =  list.files(path = "Results_GLM", pattern="glm_results", full.names=TRUE)
args$rmip_cutoff = 0.05
args$perm_cutoff = 0.05
args$outprefix = "Table - Combined hits"
farm_trait_pattern=".+1e_(.+)\\.p..\\.rmip.+.csv" # File pattern for extracting FarmCPU trait name
# Phenotypes (connecting file names to more human-readable names)
pheno_name_key=c("Flowering Time" = "FLoweringtime",
"Greenhouse Damage" = "GHD",
"Plant Height (log)" = "Log_2019.2020_PH",
"D1 Aphid Count (log)" = "Log_D1_2019.2020AC",
"D1 Aphid Damage (log)" = "Log_D1_2019.2020",
"D2 Aphid Count (log)" = "Log_D2_2019.2020AC",
"D2 Aphid Damage (log)" = "Log_D2_2019.2020",
"NDRE" = "NDREAug25",
"NDVI" = "NDVIAug25",
"SAVI" = "SAVI_Aug25",
"NDRE (flowering covariate)" = "NDREAug25.with_flowering",
"NDVI (flowering covariate)" = "NDVIAug25.with_flowering",
"SAVI (flowering covariate)" = "SAVI_Aug25.with_flowering")
# Load GLM results
cat("Loading GLM results from", length(args$glm), "input files\n")
glm = lapply(args$glm, function(infile){
mydata = read.csv(infile)
mydata$Trait = sub(mydata$Trait, pattern="&", repl=".", fixed=T)
return(mydata[,c("Trait", "Marker", "Chr", "Pos", "p", "perm_p")])
})
glm = do.call(rbind, glm)
# Load FarmCPU results
cat("Loading FarmCPU results from", length(args$farmcpu), "input files\n")
farm = lapply(args$farmcpu, function(infile){
mydata = read.csv(infile)
# Get trait
trait=sub(infile, pattern=farm_trait_pattern, repl="\\1")
mydata$Trait=trait
# Rename columns
names(mydata)[names(mydata)=="chr"] = "Chr"
names(mydata)[names(mydata)=="pos"] = "Pos"
names(mydata)[names(mydata)=="snp"] = "Marker"
# Return data
return(mydata)
})
farm = do.call(rbind, farm)
# Subset to high-quality ones
glm.hits = subset(glm, glm$perm_p <= args$perm_cutoff)
farm.hits = subset(farm, farm$rmip >= args$rmip_cutoff)
# Get unique trait-SNP combinations
combined = rbind(glm.hits[,c("Trait", "Marker", "Chr", "Pos")],
farm.hits[,c("Trait", "Marker", "Chr", "Pos")])
combined = unique(combined)
combined = combined[order(combined$Trait, combined$Chr, combined$Pos),]
# Add in GLM p-values
sitekey = paste(combined$Trait, combined$Chr, combined$Pos, combined$Marker)
glmkey = paste(glm$Trait, glm$Chr, glm$Pos, glm$Marker)
glm.match = match(sitekey, glmkey)
combined$glm_p = glm[glm.match, "p"]
combined$glm_perm_p = glm[glm.match, "perm_p"]
# Add RMIP values
farmkey = paste(farm$Trait, farm$Chr, farm$Pos, farm$Marker)
farm.match = match(sitekey, farmkey)
combined$farm_RMIP = farm[farm.match, "rmip"]
# Correct phenotype names
pheno_name_key.inverse = setNames(names(pheno_name_key), pheno_name_key) # Flip which is name and which is value
combined$Trait = pheno_name_key.inverse[combined$Trait]
# Write out full set
write.csv(combined, file=paste(args$outprefix, ".full.csv", sep=""), row.names=F)
# Write out only unique positions
spots = split(combined, paste(combined$Marker, combined$Chr, combined$Pos))
spots = lapply(spots, function(s){
data.frame(Marker=unique(s$Marker), Chr=unique(s$Chr), Pos=unique(s$Pos), Traits=paste(s$Trait, collapse=";"))
})
spots=do.call(rbind, spots)
spots = spots[order(spots$Chr, spots$Pos),]
write.csv(spots, file=paste(args$outprefix, ".unique_locations.csv", sep=""), row.names=F)
# Calculate the r-squared of markers for each trait (basically,
#  how much phenotypic variance they explain, both individually and as a group)
library(rrBLUP)
options(stringsAsFactors=F)
setwd('~/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
# Load key connecting human-fiendly phenotype names to ones used in pipeline
source("0_PhenotypeKey.r")
head(pheno_name_key)
#! /usr/bin/Rscript
# Calculate the r-squared of markers for each trait (basically,
#  how much phenotypic variance they explain, both individually and as a group)
library(rrBLUP)
options(stringsAsFactors=F)
setwd('~/Documents/Papers/PUNNURI_Sorghum Aphid Resistance/GWAS_github/publication_figures/')
# Load key connecting human-fiendly phenotype names to ones used in pipeline
source("0_PhenotypeKey.r")
# Load input hits
hits = read.csv("Table - Combined hits.full.csv")
head(hits)
